Данная программа производит парсинг сайта https://www.toramp.com

Немного о переменных. Их имена интуитивно понятно дают знать об их роли .
Однако стоит выделить лишь :
  ID -  массив , содержащиё списки индексов и значений по :
            - Жанрам
            - Авторам
            - Актёрам
            - Статусам 
            - Каналам 			
  
  flag - индикатор существования файла с ID

  
При написании кода использовались следующие библиотеки :
 - BeautifulSoup - парсер для синтаксического разбора файлов HTML:
         Использовались методы поиска .find и .find_all 
         Входные аргументы : имя тега, которое запрашивается, имена атрибутов            
	 Возвращет объект BeautifulSoup с конкретно найденными блоками
	  
 - requests - библиотека для выполнения запросов к серверу и обработки ответов:
         .get(url) - создание запроса на сервер
         Возвращет объект Response. С помощью этого объекта можно получить всю необходимую информацию со страницы.		 

 - json - формат обмена данными. Модуль json позволяет кодировать и декодировать данные в удобном формате:
         .load - загружает данные из файла 
         .dump - выгружает данные в файл		 
 
 - multiprocessing - библиотека, позволяющая работать с процессам как с потоками
         Нас интересует класс Pool, для параллельного выполнения функции между несколькими входами
         А также функция .map , которая управляет итерацией последовательности, применяет нужную функцию,
         и в конце сохраняет все получившиеся результаты в список.         

 Теперь разберемся с функциями реализующие парсинг 
 Они разделены на модули, по принципу того с чем они работают :

1. images.py - работа с картинками

 get_url_image(url):
 Принимает ссылку на сериал
 Возвращает ссылку на постер сериала
 
 
 get_file(url_image):
 Принимает ссылку на постер сериала
 Возвращает обЪект Response (картинку , по частям)

 
 get_name(url_image):
 Принимает ссылку на постер сериала
 Возвращает имя для картинки
 
 
 save_image(url):
 Принимает ссылку на сериал
 Возвращает -
 Качает картинку по частям и сохраняет в папке Images
 
 
2. episodes.py - работа с эпизодами сериалов
  
 get_episodes(url):
 Принимает ссылку на сериал
 Возвращает массив по количеству сезонов, в каждом из которых находятся данные о каждом эпизоде в формате словаря, в виде :
     dict = {
                "number": number variable,
                "name": name variable,
                "original": original variable,
                "data": data variable,
            }


3. seasons.py

 get_seasons(url):
 Принимает ссылку на сериал
 Возвращает названия сезонов
 
 
4. getId.py - работа с ID
 
 get_html(url):
 Принимает ссылку на страницу
 Возвращает html-код страницы


 get_link_last_serial(url_last_page):
 Принимает ссылку страницы каталога
 Возвращает id последнего сериала
 
 
 write_id(string, arg):
 Принимает значение и ключ(аргумент)
 Возвращает -
 Дополняет ID id для:
    Жанра  - 0 (arg)
    Статуса - 3 (arg)
    Канала - 4 (arg)
 
 
 get_valid_channel(channels):
 Принимает неотформатированную строку ,содержащую каналы
 Возвращает список каналов
 
 
 get_status_channel(url):
 Принимает ссылку на сериал
 Возвращает -
 Узнаёт статус (если есть) и каналы (если есть) сериала. И отправляет их на запись write_id
 
 
 get_page_a(url):
 Принимает ссылку на сериал
 Возвращает ссылку с доп. информацией на сериал, есть она есть
 
 
 write_id_info(array, arg):
 Принимает несколько значений и ключ(аргумент)
 Возвращает -
 Дополняет ID id для:
    Авторов - 1 (arg)
    Актеров - 2 (arg)
 
 
 get_persons(url):
 Принимает ссылку на сериал
 Возвращает -
 Если есть доп. информация get_page_a : Узнаёт актёров и авторов сериала. И отправляет их на запись write_id_info 
 
 
 get_genre(url):
 Принимает ссылку на сериал
 Возвращает -
 Если есть жанры , отправляет их на запись write_id
 
 
 write_file(array, name):
 Принимает массив данных и имя файла
 Возвращает -
 Записывает в файл данные в формате json (при помощи json.dump())
 

 get_id_info(total_pages):
 Принимает количество страниц каталога 
 Возвращает ID [{}, {}, {}, {}, {}]
 ID может уже существовать поэтому он его просто загружет. Иначе:
 Узнаёт количество сериалов в каталоге
 Пробегает по каждому сериалу и собирает все возможные базовые атрибуты сериала :
         - Жанры    0 (arg)
		 - Авторы   1 (arg)
		 - Актёры   2 (arg)
		 - Статусы  3 (arg)
		 - Каналы   4 (arg)
 И придаёт каждому соответствующий id в своей категории (arg)
 В конце - записывает в файл
 Использует методы : get_link_last_serial,
                     get_status_channel,
	                 get_persons,
                     get_genre					 
                     write_file
 
 
 5.courseWork.py - основная часть , непосредственная работа данными о сериалах (сбор, запись)

 get_total_pages(html):
 Принимает html-код страницы каталога
 Возвращает кол-во страниц каталога
 
 
 get_page_link(html):
 Принимает ссылку страницы каталога
 Возвращает ссылки на каждый сериал на странице
 
 
 get_description(url):
 Принимает ссылку на сериал
 Возвращает описание сериала
 Описание находится на странице с доп. информацией , поэтому применяется get_page_a
 
 
 write_info_id(array, arg):
 Принимает значения и ключ(аргумент)
 Возвращает id из ID для:
    Авторов - 1 (arg)
    Актеров - 2 (arg)
 
 
 get_more_info(url):
 Принимает ссылку на сериал
 Возвращает, если есть доп. информация, словарь вида :
    data = {
        "author_id": idAuthores (список id Авторов),
        "role_id"  : idActors   (список id Актёров),
    }
	
 
 get_status_id(string, arg):
 Принимает строку и ключ(аргумент)
 Возвращает id из ID для :
    Жанра   - 0 (arg)
    Статуса - 3 (arg)
    Канала  - 4 (arg)
 
 
 get_page_data(url):
 Принимает ссылку на сериал
 Возвращает data
 Собирает следующую информацию о сериале в :
    data = {
        "url": url,
        "name": name,
        "original": original,
        "timing": timing,
        "shortDescription": shortDescription,
        "description": description,
        "thumb_url": thumb_url,
        "thumb": thumb,
		"genre_id": genre_id, (если есть)
		"status_id": status_id, (если есть)
		"channel_id": channel_id (если есть)
    }
 Использует методы : get_description,
                     get_valid_channel, 
                     get_status_id,
					 get_more_info,
					 get_url_image,
					 get_name,
					 
 
 make_multi_proc(url):
 Принимает ссылку страницы каталога
 Возвращает result ([[],[],[])
 Это процесс сбора полной информации со страницы каталога по каждому из сериалов. Запись в result :
        result[0] - сбор информации по сериалу
	result[1] - сбор информации по сезонам
	result[2] - сбор информации по эпизодам
    Кроме того , загружает постер сериала
 Использует методы : get_page_link(html),
                     get_page_data,
		     get_seasons,
            	     get_episodes,
	 	     save_image
